name: GH_CI
on:
  push:
    branches:
      - develop
      - master
  pull_request:
    branches:
      - develop
      - master

defaults:
  run:
    shell: bash -l {0}

jobs:
  main_tests:
    if: "github.repository == 'IAlibay/mdanalysis'"
    runs-on: ${{ matrix.os }}
    strategy:
        matrix:
          os: [ubuntu-latest, ]
          python-version: [3.6, 3.7, 3.8]
          run_type: [FULL, ]
          install_hole: [True, ]
          codecov: [True, ]
          include:
            - name: macOS
              os: macOS-latest
              python-version: 3.6
              run_type: FULL
              install_hole: True
              codecov: True
            - name: minimal-ubuntu
              os: ubuntu-latest
              python-version: 3.6
              run_type: MIN
              install_hole: False
              codecov: True
            - name: asv_check
              os: ubuntu-latest
              python-version: 3.6
              run_type: FULL
              install_hole: False
              codecov: False
    env:
      CYTHON_TRACE_NOGIL: 1
      MPLBACKEND: agg
      MACOSX_DEPLOYMENT_TARGET: 10.9
      GH_OS: ${{ matrix.os }}
      COVERAGE_DEBUG: "process,config"
      COVERAGE_FILE: ".coverage.${{ matrix.os }}-${{ matrix.python-version}}-${{ matrix.run_type}}."
      CONDA_MIN_DEPS: "mmtf-python biopython networkx cython matplotlib scipy griddataformats hypothesis gsd codecov"
      CONDA_FULL_DEPS: "${CONDA_MIN_DEPS} seaborn>=0.7.0 clustalw=2.1 netcdf4 scikit-learn joblib>=0.12 chemfiles tqdm>=4.43.0 tidynamics>=1.0.0 rdkit>=2020.03.1 h5py==2.10.0"
      PIP_MIN_DEPS: "coveralls coverage<5 pytest-cov pytest-xdist"
      PIP_FULL_DEPS: "${PIP_MIN_DEPS} duecredit parmed"

    steps:
    - uses: actions/checkout@v2

    - name: setup_osx
      if: startsWith(matrix.os, 'macOS')
      run: |
        echo "OS_NAME=osx" >> $GITHUB_ENV
        ulimit -S -n 2048

    - name: setup_linux
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        echo "OS_NAME=linux" >> $GITHUB_ENV

    - name: setup_miniconda
      uses: conda-incubator/setup-miniconda@v2
      with:
        python-version: ${{ matrix.python-version }}
        auto-update-conda: true
        channel-priority: flexible
        # channel clash even though you have the same definition..
        channels: biobuilds, conda-forge
        add-pip-as-python-dependency: true
        mamba-version: "*"
        architecture: x64
        
    - name: install_deps
      env:
        CONDA_DEPS: CONDA_${{ matrix.run_type }}_DEPS
        PIP_DEPS: PIP_${{ matrix.run_type }}_DEPS
      run: |
        echo ${CONDA_${{ matrix.run_type }}_DEPS}
        echo $CONDA_DEPS
        echo ${PIP_${{ matrix.run_type }}_DEPS}
        echo $PIP_DEPS
        mamba install -y "numpy ${CONDA_DEPS}"
        pip install $PIP_DEPS
    
    - name: check_setup
      run: |
        # Check OS
        echo "OS: ${OS_NAME}"
        # Check python
        which python
        which pip
        conda info
        # TODO: adequate tqdm installed, setup.py still overrides...
        conda list

    - name: install_asv
      if: contains(matrix.name, 'asv_check')
      run: |
        pip install asv "setuptools<45.0.0"

    - name: install_hole
      if : matrix.install_hole
      run: |
        # cert issue, anyone with a mac can circumvent this?
        echo insecure >> ~/.curlrc
        bash ./maintainer/install_hole.sh ${OS_NAME} "${HOME}"
        HOLE_BINDIR=${HOME}/hole2/exe
        export PATH=${PATH}:${HOLE_BINDIR}

    - name: install_mda
      run: |
        # Switching to install instead of build, any issues?
        pip install -e package/ && (cd testsuite/ && python setup.py install)

    - name: run_tests
      if: contains(matrix.name, 'asv_check') != true
      run: |
        # TODO: fix weird skipped tests for gro/gms/trj/trz
        pytest -n2 testsuite/MDAnalysisTests --disable-pytest-warnings \
               --durations=50 --cov=MDAnalysis --cov-report=xml

    - name: run_asv
      if: contains(matrix.name, 'asv_check')
      run: |
        cd benchmarks
        time python -m asv check -E existing

    - name: codecov
      if: matrix.codecov
      run: |
        codecov
      #uses: codecov/codecov-action@v1
      #with:
      #  file: coverage.xml
      #  fail_ci_if_error: True
      #  verbose: True

  pylint_check:
    if: "github.repository == 'IAlibay/mdanalysis'"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: setup_miniconda
      uses: conda-incubator/setup-miniconda@v2
      with:
        python-version: 3.6
        auto-update-conda: true
        channel-priority: flexible
        channels: conda-forge
        add-pip-as-python-dependency: true
        mamba-version: "*"
        architecture: x64

    - name: install
      run: |
        which pip
        which python
        pip install pylint

    - name: pylint
      env:
        PYLINTRC: package/.pylintrc
      run: |
        pylint --py3k package/MDAnalysis && pylint --py3k testsuite/MDAnalysisTests

  pypi_check:
    if: "github.repository == 'IAlibay/mdanalysis'"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: setup_miniconda
      uses: conda-incubator/setup-miniconda@v2
      with:
        python-version: 3.6
        auto-update-conda: true
        channel-priority: flexible
        channels: conda-forge
        add-pip-as-python-dependency: true
        mamba-version: "*"
        architecture: x64

    - name: install_conda
      run: |
        mamba install setuptools cython numpy twine

    - name: install_mdanalysis
      run: |
        cd package && python setup.py sdist

    - name: check_package_build
      run: |
        DISTRIBUTION=$(ls -t1 package/dist/MDAnalysis-*.tar.gz | head -n 1)
        test -n "${DISTRIBUTION}" || { echo "no distribution package/dist/MDAnalysis-*.tar.gz found"; exit 1; }
        echo "twine check $DISTRIBUTION"
        twine check $DISTRIBUTION
